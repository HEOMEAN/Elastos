/*
 * BreadWallet
 *
 * Created by Ed Gamble <ed@breadwallet.com> on 1/22/18.
 * Copyright (c) 2018 breadwallet LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.breadwallet.core;

import java.lang.ref.WeakReference;

/**
 *
 */
public class BRCoreWallet extends BRCoreJniReference
{
    interface Listener {
        // func balanceChanged(_ balance: UInt64)
        void balanceChanged(long balance);

        // func txAdded(_ tx: BRTxRef)
        void onTxAdded(BRCoreTransaction transaction);

        // func txUpdated(_ txHashes: [UInt256], blockHeight: UInt32, timestamp: UInt32)
        void onTxUpdated(String hash, int blockHeight, int timeStamp);

        // func txDeleted(_ txHash: UInt256, notifyUser: Bool, recommendRescan: Bool)
        void onTxDeleted(String hash, int notifyUser, final int recommendRescan);
    }

    //
    //
    //

    protected WeakReference<Listener> listener = null;

    public BRCoreWallet(BRCoreTransaction[] transactions,
                        BRCoreMasterPubKey masterPubKey,
                        Listener listener)
    {
        super (createJniCoreWallet(transactions, masterPubKey));
        installListener (listener);
        assert (null != this.listener);
    }

    protected static native long createJniCoreWallet (BRCoreTransaction[] transactions,
                                                      BRCoreMasterPubKey masterPubKey);

    protected native void installListener (Listener listener);

    // returns the first unused external address
    // BRAddress BRWalletReceiveAddress(BRWallet *wallet);
    public native BRCoreAddress getReceiveAddress ();

    // writes all addresses previously genereated with BRWalletUnusedAddrs() to addrs
    // returns the number addresses written, or total number available if addrs is NULL
    public native BRCoreAddress[] getAllAddresses ();

    // true if the address was previously generated by BRWalletUnusedAddrs() (even if it's now used)
    // int BRWalletContainsAddress(BRWallet *wallet, const char *addr);
    public native boolean containsAddress (BRCoreAddress address);

    // true if the address was previously used as an input or output in any wallet transaction
    // int BRWalletAddressIsUsed(BRWallet *wallet, const char *addr);
    public native boolean addressIsUsed (BRCoreAddress address);

    public native BRCoreTransaction[] getTransactions ();

    public native BRCoreTransaction[] getTransactionsConfirmedBefore (long blockHeight);

    public native long getBalance ();

    public native long getTotalSent ();

    public native long getTotalReceived ();

    // UTXOs

    public native long getFeePerKb ();

    public native void setFeePerKb (long feePerKb);

    public native BRCoreTransaction createTransaction (long amount, BRCoreAddress address);

    // createTxForOutputs

    // sign transaction

    public native boolean containsTransaction (BRCoreTransaction transaction);

    public native boolean registerTransaction (BRCoreTransaction transaction);

    public native void removeTransaction (byte[] transactionHash);

    public native BRCoreTransaction transactionForHash (byte[] transactionHash);

    public native boolean transactionIsValid (BRCoreTransaction transaction);

    public native boolean transactionIsPending (BRCoreTransaction transaction);

    public native boolean transactionIsVerified (BRCoreTransaction transaction);

    // update transactions

    // set TX Unconfirmed After


    public long transactionAmount (BRCoreTransaction tx)
    {
        long amountSent = getTransactionAmountSent(tx);
        long amountReceived = getTransactionAmountReceived(tx);

        return amountSent == 0
                ? amountReceived
                : -1 * (amountSent - amountReceived - getTransactionFee(tx));
    }

    public native long getTransactionFee (BRCoreTransaction tx);

    public native long getTransactionAmountSent (BRCoreTransaction tx);

    public native long getTransactionAmountReceived (BRCoreTransaction tx);

    public native long getBalanceAfterTransaction (BRCoreTransaction transaction);

    public native long getFeeForTransactionSize (int size);

    public native long getFeeForTransactionAmount (long amount);

    public native long getMinOutputAmount ();

    public native long getMaxOutputAmount ();

    // local amount

    // bitcoin amount

    // To call BRWalletFree()
    public native void disposeNative ();


    @Override
    public String toString() {
        return "BRCoreWallet {@" + jniReferenceAddress +
                "\n  rcv addr: " + getReceiveAddress().stringify() +
                "\n  balance : " + getBalance() +
                "\n  fee/kb  : " + getFeePerKb() +
                '}';
    }
}

