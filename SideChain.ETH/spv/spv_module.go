package spv

import (
	"bytes"
	"errors"
	"fmt"
	"math/big"
	"path/filepath"
	"strings"
	"time"

	"github.com/elastos/Elastos.ELA.SPV/bloom"
	spv "github.com/elastos/Elastos.ELA.SPV/interface"
	ethCommon "github.com/elastos/Elastos.ELA.SideChain.ETH/common"
	"github.com/elastos/Elastos.ELA.SideChain.ETH/crypto"
	"github.com/elastos/Elastos.ELA.SideChain/types"
	"github.com/elastos/Elastos.ELA/common"
	"github.com/elastos/Elastos.ELA/common/config"
	core "github.com/elastos/Elastos.ELA/core/types"
	"github.com/elastos/Elastos.ELA/core/types/payload"
	"github.com/elastos/Elastos.ELA/utils/signal"
	"github.com/syndtr/goleveldb/leveldb"
)

var dataDir = "./"

//Service
var spvService *Service

const (
	txNotperformed int64 = iota
)

type Config struct {
	// DataDir is the data path to store db files peer addresses etc.
	DataDir string

	// ActiveNet indicates the ELA network to connect with.
	ActiveNet string

	// GenesisAddress is the address generated by the side chain genesis block.
	GenesisAddress string
}

type Service struct {
	spv.DPOSSPVService
}

func NewService(cfg *Config) (*Service, error) {
	var chainParams *config.Params
	switch strings.ToLower(cfg.ActiveNet) {
	case "testnet", "test", "t":
		chainParams = config.DefaultParams.TestNet()
	case "regnet", "reg", "r":
		chainParams = config.DefaultParams.RegNet()
	default:
		chainParams = &config.DefaultParams
		chainParams.DNSSeeds = nil
		chainParams.OriginArbiters = []string{
			"034c6337f1dd5c58ac46257aadc9d7df14a61f73a7a90b78bad17effae0668c6fd",
			"0262ed1cebce01c0a0920de7d4d8c060e43152cf0f3dc77dcad959e4db2318dae5",
			"035b7025c4effc881d71d260c26cbf6f6e59611d833ba0d9663daf22bed1949b95",
			"0201dcedec7149f076ec1a43eaf2a002ef03ed443b903e5fcfc2f4d11878d7e0de",
		}
		chainParams.CRCArbiters = []string{
			"034c6337f1dd5c58ac46257aadc9d7df14a61f73a7a90b78bad17effae0668c6fd",
			"0262ed1cebce01c0a0920de7d4d8c060e43152cf0f3dc77dcad959e4db2318dae5",
			"035b7025c4effc881d71d260c26cbf6f6e59611d833ba0d9663daf22bed1949b95",
			"0201dcedec7149f076ec1a43eaf2a002ef03ed443b903e5fcfc2f4d11878d7e0de",
		}
		chainParams.CheckAddressHeight = 200
		chainParams.VoteStartHeight = 200
	}
	spvCfg := spv.DPOSConfig{Config: spv.Config{
		DataDir:        cfg.DataDir,
		ChainParams:    chainParams,
		PermanentPeers: []string{"127.0.0.1:20338"},
	},
	}
	dataDir = cfg.DataDir
	initLog(cfg.DataDir)

	service, err := spv.NewDPOSSPVService(&spvCfg, signal.NewInterrupt().C)
	if err != nil {
		return nil, err
	}

	err = service.RegisterTransactionListener(&listener{
		address: cfg.GenesisAddress,
		service: service,
	})

	if err != nil {
		return nil, err
	}

	spvService = &Service{service}
	return &Service{DPOSSPVService: service}, nil
}

func (s *Service) VerifyTransaction(tx *types.Transaction) error {
	payload, ok := tx.Payload.(*types.PayloadRechargeToSideChain)
	if !ok {
		return errors.New("[VerifyTransaction] Invalid payload core.PayloadRechargeToSideChain")
	}

	switch tx.PayloadVersion {
	case types.RechargeToSideChainPayloadVersion0:

		proof := new(bloom.MerkleProof)
		mainChainTransaction := new(core.Transaction)

		reader := bytes.NewReader(payload.MerkleProof)
		if err := proof.Deserialize(reader); err != nil {
			return errors.New("[VerifyTransaction] RechargeToSideChain payload deserialize failed")
		}

		reader = bytes.NewReader(payload.MainChainTransaction)
		if err := mainChainTransaction.Deserialize(reader); err != nil {
			return errors.New("[VerifyTransaction] RechargeToSideChain mainChainTransaction deserialize failed")
		}

		if err := s.DPOSSPVService.VerifyTransaction(*proof, *mainChainTransaction); err != nil {
			return errors.New("[VerifyTransaction] SPV module verify transaction failed.")
		}

	case types.RechargeToSideChainPayloadVersion1:

		_, err := s.GetTransaction(&payload.MainChainTransactionHash)
		if err != nil {
			return errors.New("[VerifyTransaction] Main chain transaction not found")
		}

	default:
		return errors.New("[VerifyTransaction] invalid payload version.")
	}

	return nil
}

func (s *Service) VerifyElaHeader(hash *common.Uint256) error {
	blockChain := s.HeaderStore()
	_, err := blockChain.Get(hash)
	if err != nil {
		return errors.New("[VerifyElaHeader] Verify ela header failed.")
	}
	return nil
}

type listener struct {
	address string
	service spv.DPOSSPVService
}

func (l *listener) Address() string {
	return l.address
}

func (l *listener) Type() core.TxType {
	return core.TransferCrossChainAsset
}

func (l *listener) Flags() uint64 {
	return spv.FlagNotifyInSyncing
}

func (l *listener) Notify(id common.Uint256, proof bloom.MerkleProof, tx core.Transaction) {
	// Submit transaction receipt
	fmt.Println(" ")
	fmt.Println(" ")
	fmt.Println("========================================================================================")
	fmt.Println("mainchain transaction info")
	fmt.Println("----------------------------------------------------------------------------------------")
	fmt.Println(string(tx.String()))
	fmt.Println("----------------------------------------------------------------------------------------")
	fmt.Println(" ")
	savePayloadInfo(tx)
	l.service.SubmitTransactionReceipt(id, tx.Hash())
}

func savePayloadInfo(elaTx core.Transaction) {
	db, err := leveldb.OpenFile(filepath.Join(dataDir, "spv_transaction_info.db"), nil)
	defer db.Close()
	if err != nil {
		fmt.Println(err)
	}

	nr := bytes.NewReader(elaTx.Payload.Data(elaTx.PayloadVersion))
	p := new(payload.TransferCrossChainAsset)
	p.Deserialize(nr, elaTx.PayloadVersion)
	var fees []string
	var address []string
	var outputs []string
	for i, amount := range p.CrossChainAmounts {
		fees = append(fees, (elaTx.Outputs[i].Value - amount).String())
		outputs = append(outputs, elaTx.Outputs[i].Value.String())
		address = append(address, p.CrossChainAddresses[i])
	}
	addr := strings.Join(address, ",")
	fee := strings.Join(fees, ",")
	output := strings.Join(outputs, ",")
	err = db.Put([]byte(elaTx.Hash().String()+"Fee"), []byte(fee), nil)

	if err != nil {
		fmt.Println(err)
	}

	err = db.Put([]byte(elaTx.Hash().String()+"Address"), []byte(addr), nil)

	if err != nil {
		fmt.Println(err)
	}
	err = db.Put([]byte(elaTx.Hash().String()+"Output"), []byte(output), nil)

	if err != nil {
		fmt.Println(err)
	}

	return
}

func FindPayloadByTransactionHash(transactionHash string) string {
	if transactionHash == "" {
		return ""
	}

	transactionHash = strings.Replace(transactionHash, "0x", "", 1)
	db, err := leveldb.OpenFile(filepath.Join(dataDir, "spv_transaction_info.db"), nil)
	if err != nil {
		fmt.Println(err)
		return ""
	}
	defer db.Close()

	v, err := db.Get([]byte(transactionHash), nil)

	if err != nil {
		fmt.Println(err)
		return ""
	}

	return string(v)

}

func FindOutputFeeAndaddressByTxHash(transactionHash string) (*big.Int, ethCommon.Address, *big.Int) {
	var emptyaddr ethCommon.Address
	transactionHash = strings.Replace(transactionHash, "0x", "", 1)
	db, err := leveldb.OpenFile(filepath.Join(dataDir, "spv_transaction_info.db"), nil)
	if err != nil {
		fmt.Println(err)
		return new(big.Int), emptyaddr, new(big.Int)
	}
	defer db.Close()
	v, err := db.Get([]byte(transactionHash+"Fee"), nil)
	if err != nil {
		fmt.Println(err)
		return new(big.Int), emptyaddr, new(big.Int)
	}
	fees := strings.Split(string(v), ",")
	f, err := common.StringToFixed64(fees[0])
	if err != nil {
		fmt.Println(err)
		return new(big.Int), emptyaddr, new(big.Int)

	}
	fe := new(big.Int).SetInt64(f.IntValue())
	y := new(big.Int).SetInt64(10000000000)

	addrss, err := db.Get([]byte(transactionHash+"Address"), nil)
	if err != nil {
		fmt.Println(err)
		return new(big.Int), emptyaddr, new(big.Int)

	}
	addrs := strings.Split(string(addrss), ",")
	if !ethCommon.IsHexAddress(addrs[0]) {
		return new(big.Int), emptyaddr, new(big.Int)
	}
	outputs, err := db.Get([]byte(transactionHash+"Output"), nil)
	if err != nil {
		fmt.Println(err)
		return new(big.Int), emptyaddr, new(big.Int)

	}
	output := strings.Split(string(outputs), ",")
	o, err := common.StringToFixed64(output[0])
	if err != nil {
		fmt.Println(err)
		return new(big.Int), emptyaddr, new(big.Int)

	}
	op := new(big.Int).SetInt64(o.IntValue())
	return new(big.Int).Mul(fe, y), ethCommon.HexToAddress(addrs[0]), new(big.Int).Mul(op, y)
}

// Get Ela Chain Height
func GetElaChainHeight() uint32 {
	var elaHeight uint32 = 0
	if spvService == nil || spvService.DPOSSPVService == nil {
		fmt.Println("spv service initiation does not finish yet !")
	} else {
		elaHeight = spvService.DPOSSPVService.GetHeight()
	}
	return elaHeight
}

// Until Get Ela Chain Height
func UntilGetElaChainHeight() uint32 {
	for {
		if elaHeight := GetElaChainHeight(); elaHeight != 0 {
			return elaHeight
		}
		fmt.Println("can not get elas height, because ela height interface has no any response !")
		time.Sleep(time.Millisecond * 1000)
	}
}

// Determine whether an address is an arbiter
func AddrIsArbiter(address ethCommon.Address) int8 {
	if spvService == nil || spvService.DPOSSPVService == nil {
		fmt.Println("spv service initiation does not finish yet !")
	} else {
		arbiters := spvService.DPOSSPVService.GetProducersByHeight(spvService.DPOSSPVService.GetHeight())
		for _, arbiter := range arbiters {
			publicKey, convertErr := crypto.UnmarshalPubkey(arbiter)
			if convertErr == nil {
				if abiterAddress := crypto.PubkeyToAddress(*publicKey); abiterAddress == address {
					return 1
				}
			}
		}
	}
	return 0
}

// Determine whether an address is an arbiter
func AddrIsArbiterWithElaHeight(address ethCommon.Address, elaHeight uint32) int8 {
	if spvService == nil || spvService.DPOSSPVService == nil {
		fmt.Println("spv service initiation does not finish yet !")
	} else {
		arbiters := spvService.DPOSSPVService.GetProducersByHeight(elaHeight)
		for _, arbiter := range arbiters {
			publicKey, convertErr := crypto.UnmarshalPubkey(arbiter)
			if convertErr == nil {
				if abiterAddress := crypto.PubkeyToAddress(*publicKey); abiterAddress == address {
					return 1
				}
			}
		}
	}
	return 0
}

func GetCurrentProducers() [][]byte {
	var arbiters [][]byte
	if spvService == nil || spvService.DPOSSPVService == nil {
		fmt.Println("spv service initiation does not finish yet !")
	} else {
		arbiters := spvService.DPOSSPVService.GetProducersByHeight(GetCurrentElaHeight())
		fmt.Println("---------------------------------------------------------------")
		fmt.Println(arbiters)
	}

	return arbiters
}

func GetCurrentElaHeight() uint32 {
	var height uint32
	if spvService == nil || spvService.DPOSSPVService == nil {
		fmt.Println("spv service initiation does not finish yet !")
	} else {
		height = spvService.DPOSSPVService.GetHeight()
		fmt.Println("----GetCurrentElaHeight-----------------------------------------------------------")
		fmt.Println(height)
	}

	return height
}

func GetProducersByHeight(height uint32) [][]byte {
	var arbiters [][]byte

	if spvService == nil || spvService.DPOSSPVService == nil {
		fmt.Println("spv service initiation does not finish yet !")
	} else {
		arbiters := spvService.DPOSSPVService.GetProducersByHeight(height)
		fmt.Println("---------------------------------------------------------------")
		fmt.Println(arbiters)
	}
	return arbiters
}
