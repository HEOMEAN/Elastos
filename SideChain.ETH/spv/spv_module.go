package spv

import (
	"bytes"
	"errors"
	"fmt"
	"github.com/elastos/Elastos.ELA.SideChain/types"
	"path/filepath"

	"github.com/elastos/Elastos.ELA.SPV/bloom"
	spv "github.com/elastos/Elastos.ELA.SPV/interface"
	"github.com/elastos/Elastos.ELA.Utility/common"
	"github.com/elastos/Elastos.ELA/core"

	"github.com/syndtr/goleveldb/leveldb"
	"strings"
)

const (
	minConnections = 8
	maxConnections = 125
)

var dataDir = "./"

type Config struct {
	// DataDir is the data path to store db files peer addresses etc.
	DataDir string

	// The magic number that specify which network to connect.
	Magic uint32

	// The foundation address of the genesis block, which is different between
	// MainNet, TestNet, RegNet etc.
	Foundation string

	// The public seed peers addresses.
	SeedList []string

	// NodePort is the default port for public peers provide services.
	DefaultPort uint16

	// GenesisAddress is the address generated by the side chain genesis block.
	GenesisAddress string
}

type Service struct {
	spv.SPVService
}

func NewService(cfg *Config) (*Service, error) {
	spvCfg := spv.Config{
		DataDir:        cfg.DataDir,
		Magic:          cfg.Magic,
		Foundation:     cfg.Foundation,
		SeedList:       cfg.SeedList,
		DefaultPort:    cfg.DefaultPort,
		MinOutbound:    minConnections,
		MaxConnections: maxConnections,
		OnRollback:     nil, // Not implemented yet
	}
	initLog(cfg.DataDir)
	service, err := spv.NewSPVService(&spvCfg)
	if err != nil {
		return nil, err
	}

	err = service.RegisterTransactionListener(&listener{
		address: cfg.GenesisAddress,
		service: service,
	})
	if err != nil {
		return nil, err
	}

	dataDir = cfg.DataDir
	return &Service{SPVService: service}, nil
}

func (s *Service) VerifyTransaction(tx *types.Transaction) error {
	payload, ok := tx.Payload.(*types.PayloadRechargeToSideChain)
	if !ok {
		return errors.New("[VerifyTransaction] Invalid payload core.PayloadRechargeToSideChain")
	}

	switch tx.PayloadVersion {
	case types.RechargeToSideChainPayloadVersion0:

		proof := new(bloom.MerkleProof)
		mainChainTransaction := new(core.Transaction)

		reader := bytes.NewReader(payload.MerkleProof)
		if err := proof.Deserialize(reader); err != nil {
			return errors.New("[VerifyTransaction] RechargeToSideChain payload deserialize failed")
		}

		reader = bytes.NewReader(payload.MainChainTransaction)
		if err := mainChainTransaction.Deserialize(reader); err != nil {
			return errors.New("[VerifyTransaction] RechargeToSideChain mainChainTransaction deserialize failed")
		}

		if err := s.SPVService.VerifyTransaction(*proof, *mainChainTransaction); err != nil {
			return errors.New("[VerifyTransaction] SPV module verify transaction failed.")
		}

	case types.RechargeToSideChainPayloadVersion1:

		_, err := s.GetTransaction(&payload.MainChainTransactionHash)
		if err != nil {
			return errors.New("[VerifyTransaction] Main chain transaction not found")
		}

	default:
		return errors.New("[VerifyTransaction] invalid payload version.")
	}

	return nil
}

func (s *Service) VerifyElaHeader(hash *common.Uint256) error {
	blockChain := s.HeaderStore()
	_, err := blockChain.Get(hash)
	if err != nil {
		return errors.New("[VerifyElaHeader] Verify ela header failed.")
	}
	return nil
}

type listener struct {
	address string
	service spv.SPVService
}

func (l *listener) Address() string {
	return l.address
}

func (l *listener) Type() core.TransactionType {
	return core.TransferCrossChainAsset
}

func (l *listener) Flags() uint64 {
	return spv.FlagNotifyInSyncing
}

func (l *listener) Notify(id common.Uint256, proof bloom.MerkleProof, tx core.Transaction) {
	// Submit transaction receipt
	fmt.Println(" ")
	fmt.Println(" ")
	fmt.Println("========================================================================================")
	fmt.Println("mainchain transaction info")
	fmt.Println("----------------------------------------------------------------------------------------")
	fmt.Println(string(tx.String()))
	fmt.Println("----------------------------------------------------------------------------------------")
	fmt.Println(" ")

	savePayloadInfo(tx)
	defer l.service.SubmitTransactionReceipt(id, tx.Hash())
}

func savePayloadInfo(elaTx core.Transaction) error {
	db, err := leveldb.OpenFile(filepath.Join(dataDir, "spv_transaction_info.db"), nil)
	if err != nil {
		fmt.Println(err)
	}
	defer db.Close()
	err = db.Put([]byte(elaTx.Hash().String()), []byte(common.BytesToHexString(elaTx.Payload.Data(elaTx.PayloadVersion))), nil)

	if err != nil {
		fmt.Println(err)
	}
	return nil
}

func FindPayloadByTransactionHash(transactionHash string) string {
	if transactionHash == "" {
		return "0"
	}

	transactionHash = strings.Replace(transactionHash, "0x", "", 1)
	db, err := leveldb.OpenFile(filepath.Join(dataDir, "spv_transaction_info.db"), nil)
	if err != nil {
		fmt.Println(err)
		return "0"
	}
	defer db.Close()

	v, err := db.Get([]byte(transactionHash), nil)

	if err != nil {
		fmt.Println(err)
		return "0"
	}

	return string(v)

}
